Digital clock project 25 /08/2017
*******************************************************/

#include <mega8.h>
#include <delay.h>
#include <ds1307.h>
#include <ds3231.h>
#include <i2c.h>
int j,d1,d2,d3,d4,d5,d6,d7,d8,HH,SS,MM,HH1,MM1,SS1,i,temp,check,t=0;
void display(int value)
{

    if(value==0)
        PORTD=0b01000000;  
    if(value==1)
        PORTD=0b01111001;
    if(value==2)
        PORTD=0b00100100;
    if(value==3)
        PORTD=0b00110000;
    if(value==4)
        PORTD=0b00011001;
    if(value==5)
        PORTD=0b00010010;
    if(value==6)
        PORTD=0b00000010;
    if(value==7)
        PORTD=0b01111000;
    if(value==8)
        PORTD=0b00000000;
    if(value==9)
        PORTD=0b00010000;
}



void led_read(int HH,int MM,int SS,int temp)
{
   d1=HH%10;
   d2=HH/10; 
   d3=MM%10;
   d4=MM/10;
   d5=SS%10;
   d6=SS/10;
   d7=temp%10;
   d8=temp/10;
   
}

void multiplex()
{

  for(i=1;i<101;i++)
      {   
       
          
        display(d2);
        PORTB.3=1;
        delay_ms(1.25); 
        PORTB.3=0;
      
       
        display(d1);
        PORTB.2=1;
        delay_ms(1.25); 
        PORTB.2=0;  
        
        display(d4);
        PORTD.7=1;
        delay_ms(1.25); 
        PORTD.7=0;   
        
        display(d3);
        PORTB.4=1;
        delay_ms(1.25); 
        PORTB.4=0;
                       
        display(d6);
        PORTB.5=1;
        delay_ms(1.25); 
        PORTB.5=0;
         
        
        display(d5);
        PORTB.1=1;
        delay_ms(1.25); 
        PORTB.1=0;
           
        
        display(d8); 
        PORTB.7=1;
        delay_ms(1.25); 
        PORTB.7=0;
       
        
        display(d7); 
        PORTB.0=1;
        delay_ms(1.25); 
        PORTB.0=0;
        
       }

}





void main(void)
{
        unsigned char hour, minute, sec;
 
DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
// State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0 
PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);

// Port C initialization
// Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
// State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (1<<PORTC3) | (1<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);

// Port D initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out 
DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
// State: Bit7=T Bit6=T Bit5=T Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0 
PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);

// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: Timer 0 Stopped
TCCR0=(0<<CS02) | (0<<CS01) | (0<<CS00);
TCNT0=0x00;

// Timer/Counter 1 initialization
// Clock source: System Clock
// Clock value: Timer1 Stopped
// Mode: Normal top=0xFFFF
// OC1A output: Disconnected
// OC1B output: Disconnected
// Noise Canceler: Off
// Input Capture on Falling Edge
// Timer1 Overflow Interrupt: Off
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
TCNT1H=0x00;
TCNT1L=0x00;
ICR1H=0x00;
ICR1L=0x00;
OCR1AH=0x00;
OCR1AL=0x00;
OCR1BH=0x00;
OCR1BL=0x00;

// Timer/Counter 2 initialization
// Clock source: System Clock
// Clock value: Timer2 Stopped
// Mode: Normal top=0xFF
// OC2 output: Disconnected
ASSR=0<<AS2;
TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
TCNT2=0x00;
OCR2=0x00;

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<TOIE0);

// External Interrupt(s) initialization
// INT0: Off
// INT1: Off
MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);

// USART initialization
// USART disabled
UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);

// Analog Comparator initialization
// Analog Comparator: Off
// The Analog Comparator's positive input is
// connected to the AIN0 pin
// The Analog Comparator's negative input is
// connected to the AIN1 pin
ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
SFIOR=(0<<ACME);

// ADC initialization
// ADC disabled
ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);

// SPI initialization
// SPI disabled
SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);

// TWI initialization
// TWI disabled
TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);

// Bit-Banged I2C Bus initialization
// I2C Port: PORTC
// I2C SDA bit: 4
// I2C SCL bit: 5
// Bit Rate: 100 kHz
// Note: I2C settings are specified in the
// Project|Configure|C Compiler|Libraries|I2C menu.
i2c_init();
rtc_init(0,0);
//rtc_set_time(12,53,55); to set time first time 

while (1)
{ 
      
  
   while(1)
    {
    
         rtc_get_time(&hour,&minute,&sec);
         if(check==0)
         {   
         temp=ds3231_get_temp();
         check=1;
         }
         else 
         {
         check=0;
         
         }
         HH=(int)hour;
         MM=(int)minute;
         SS=(int)sec;
         temp=(int)temp;
         led_read(HH,MM,SS,temp);
         multiplex(); 
      
       
    if(PINC.0==0)
     { 
     
        HH1=HH;
        MM1=MM;
        SS1=SS;
       
        while(1)
        {
            led_read(HH1,MM1,SS1,temp);
            multiplex(); 
      
            if(PINC.2==0)
            {
            t++;
       
            }
       
            if(t>3)
            {t=t-3;}
      
      
       
       
             if(t==1)
            { 
                if(PINC.0==0)
                {
       
                HH1++;
                    if(HH1>24)
                    {
                    HH1=HH1-24;
                    }   
       
                } 
       
                if(PINC.1==0)
                {
       
                    HH1--;
                     if(HH1<0)
                    {
                    HH1=HH1+24;
                    }
       
                }   
            }
       
       
            if(t==2)
            { 
                if(PINC.0==0)
                {
       
                    MM1++;
                    if(MM1>60)
                    {
                    MM1=MM1-60;
                    }   
       
                } 
       
                if(PINC.1==0)
                {
       
                    MM1--;
                    if(MM1<0)
                    {
                    MM1=MM1+60;
                    }
       
                }   
            }    
       
            if(t==3)
            { 
                if(PINC.0==0)
                {
       
                    SS1++;
                    if(SS1>60)
                    {
                        SS1=SS1-60;
                    }   
       
                } 
       
                if(PINC.1==0)
                {
       
                    SS1--;
                    if(SS1<0)
                    {
                        SS1=SS1+60;
                    }
       
                }   
            }
                    

       
      
       
        if(PINC.3==0)
        {
        rtc_set_time(HH1,MM1,SS1);
        
        break;
        }
       
       
       
        }
       }
    }
       
       
        
       
         
      
}  
} }

